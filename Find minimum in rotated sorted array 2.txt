public class Solution {
    public int FindMin(int[] nums) 
    {
        if(nums.Length == 0)
        {
            return -1;
        }
        if(nums.Length == 1)
        {
            return nums[0];
        }
        var start = 0;
        var end = nums.Length -1;
        var length = nums.Length;
        
        if(nums[start] < nums[end])
        {
            return nums[start];
        }
        
        while(start < end)
        {
            //Calculating mid
            var mid = start + (end-start ) / 2;
            
            if(nums[mid] == nums[end])
            {
                end = end - 1;
            }
            else
            {
                var next = (mid + 1) % length;
                var prev = (mid + (length-1)) % length;
                
                if(nums[mid] < nums[prev] && nums[mid] <= nums[next])
                {
                    return nums[mid];
                }
                else
                {
                    //Find unsorted array as min element is present in unsorted side only
                    if(nums[end] > nums[mid])
                    {
                        end = mid - 1;
                    }
                    else
                    {
                        start = mid + 1;
                    }   
                }
            }
        }
        
        return nums[start];
    }
}